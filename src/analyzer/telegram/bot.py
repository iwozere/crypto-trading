# ticker_bot/bot.py

import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import FSInputFile
from aiogram.utils import executor

from src.analyzer.telegram.combine import analyze_ticker

logging.basicConfig(level=logging.INFO)

BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")  # –£—Å—Ç–∞–Ω–æ–≤–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)


@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    await message.reply("üìä –û—Ç–ø—Ä–∞–≤—å —Ç–∏–∫–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä: AAPL –∏–ª–∏ TSLA), –∏ —è –ø—Ä–∏—à–ª—é –∞–Ω–∞–ª–∏–∑ –∫–æ–º–ø–∞–Ω–∏–∏.")


@dp.message_handler(lambda message: message.text and message.text.strip().isalnum())
async def handle_ticker(message: types.Message):
    ticker = message.text.strip().upper()
    await message.reply(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é {ticker}...")

    try:
        result = analyze_ticker(ticker)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
        text = (
            f"üìà <b>{result.ticker}</b>\n\n"
            f"üíµ –¶–µ–Ω–∞: ${result.fundamentals.price:.2f}\n"
            f"üè¶ P/E: {result.fundamentals.pe_ratio:.2f}, EPS: {result.fundamentals.eps:.2f}\n"
            f"üí∏ –î–æ—Ö–æ–¥—ã: ${result.fundamentals.revenue / 1e9:.2f}B, –ü—Ä–∏–±—ã–ª—å: ${result.fundamentals.net_income / 1e9:.2f}B\n"
            f"üìâ RSI: {result.technicals.rsi:.2f}, MACD: {result.technicals.macd:.2f}, Signal: {result.technicals.macd_signal:.2f}\n"
            f"üìä MA(50): {result.technicals.ma50:.2f}, MA(200): {result.technicals.ma200:.2f}"
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        chart_path = f"/tmp/{ticker}_chart.png"
        with open(chart_path, "wb") as f:
            f.write(result.chart_image)

        await bot.send_photo(chat_id=message.chat.id, photo=FSInputFile(chart_path), caption=text, parse_mode="HTML")

    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞")
        await message.reply(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–∏–∫–µ—Ä–∞ {ticker}: {str(e)}")


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
